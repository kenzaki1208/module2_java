---

# üéØ Ph√¢n t√≠ch & Gi·∫£i quy·∫øt B√†i To√°n T·∫°o Thread

## B∆∞·ªõc 1: ƒê·ªçc v√† hi·ªÉu y√™u c·∫ßu ƒë·ªÅ b√†i

ƒê·ªÅ y√™u c·∫ßu:

* **M·ª•c ti√™u**: Luy·ªán t·∫≠p t·∫°o thread trong Java.
* **Y√™u c·∫ßu chi ti·∫øt**:

  1. T·∫°o **2 class tri·ªÉn khai `Runnable`**:

     * `LazyPrimeFactorization` (thu·∫≠t to√°n ki·ªÉm tra s·ªë nguy√™n t·ªë ch∆∞a t·ªëi ∆∞u).
     * `OptimizedPrimeFactorization` (thu·∫≠t to√°n ki·ªÉm tra s·ªë nguy√™n t·ªë t·ªëi ∆∞u h∆°n).
  2. C·∫£ 2 runnable khi `start()` ƒë·ªÅu **t√¨m s·ªë nguy√™n t·ªë v√† in k·∫øt qu·∫£**.
  3. **Ch·∫°y ƒë·ªìng th·ªùi c·∫£ 2 runnable** ƒë·ªÉ so s√°nh hi·ªáu qu·∫£.

üëâ Nh∆∞ v·∫≠y b√†i n√†y ki·ªÉm tra **ki·∫øn th·ª©c Thread** v√† **t∆∞ duy t·ªëi ∆∞u thu·∫≠t to√°n**.

---

## B∆∞·ªõc 2: X√°c ƒë·ªãnh b√†i to√°n con

T√°ch ƒë·ªÅ b√†i th√†nh c√°c ph·∫ßn nh·ªè d·ªÖ l√†m h∆°n:

1. **Ph·∫ßn Thread**

   * C·∫ßn bi·∫øt `Runnable` l√† g√¨.
   * Bi·∫øt c√°ch t·∫°o `Thread` t·ª´ `Runnable`.
   * Bi·∫øt c√°ch `start()` ƒë·ªÉ ch·∫°y song song.

2. **Ph·∫ßn t√¨m s·ªë nguy√™n t·ªë**

   * Lazy: duy·ªát t·ª´ 2 ƒë·∫øn n - 1 ‚Üí n·∫øu chia h·∫øt th√¨ kh√¥ng ph·∫£i s·ªë nguy√™n t·ªë.
   * Optimized: ch·ªâ c·∫ßn duy·ªát ƒë·∫øn ‚àön.
   * Vi·∫øt m·ªôt h√†m `isPrime(int n)` cho m·ªói class.

3. **Ph·∫ßn main()**

   * T·∫°o ƒë·ªëi t∆∞·ª£ng t·ª´ 2 runnable.
   * G√≥i v√†o 2 thread.
   * Start c·∫£ 2 ƒë·ªÉ ch√∫ng ch·∫°y song song.

---

## B∆∞·ªõc 3: L·∫≠p k·∫ø ho·∫°ch tri·ªÉn khai (pseudo-code)

Tr∆∞·ªõc khi code, m√¨nh vi·∫øt ra k·∫ø ho·∫°ch d·∫°ng ‚Äúng√¥n ng·ªØ th∆∞·ªùng‚Äù:

```
Class LazyPrimeFactorization implements Runnable:
    Trong run():
        duy·ªát c√°c s·ªë t·ª´ 2 -> N
        n·∫øu l√† s·ªë nguy√™n t·ªë (d√πng thu·∫≠t to√°n ƒë∆°n gi·∫£n):
            in ra

Class OptimizedPrimeFactorization implements Runnable:
    Trong run():
        duy·ªát c√°c s·ªë t·ª´ 2 -> N
        n·∫øu l√† s·ªë nguy√™n t·ªë (d√πng thu·∫≠t to√°n t·ªëi ∆∞u):
            in ra

Main:
    T·∫°o ƒë·ªëi t∆∞·ª£ng lazy
    T·∫°o ƒë·ªëi t∆∞·ª£ng optimized
    T·∫°o Thread t1 v·ªõi lazy
    T·∫°o Thread t2 v·ªõi optimized
    Start c·∫£ t1 v√† t2
```

---

## B∆∞·ªõc 4: Vi·∫øt code chi ti·∫øt

M√¨nh code t·ª´ng class nh·ªè r·ªìi r√°p l·∫°i.

### LazyPrimeFactorization.java

```java
public class LazyPrimeFactorization implements Runnable {
    @Override
    public void run() {
        int number = 2;
        while (number <= 50) { // Gi·ªõi h·∫°n ƒë·ªÉ d·ªÖ xem k·∫øt qu·∫£
            if (isPrime(number)) {
                System.out.println("Lazy found prime: " + number);
            }
            number++;
        }
    }

    private boolean isPrime(int n) {
        if (n < 2) return false;
        for (int i = 2; i < n; i++) {  // Thu·∫≠t to√°n ƒë∆°n gi·∫£n
            if (n % i == 0) return false;
        }
        return true;
    }
}
```

### OptimizedPrimeFactorization.java

```java
public class OptimizedPrimeFactorization implements Runnable {
    @Override
    public void run() {
        int number = 2;
        while (number <= 50) {
            if (isPrime(number)) {
                System.out.println("Optimized found prime: " + number);
            }
            number++;
        }
    }

    private boolean isPrime(int n) {
        if (n < 2) return false;
        for (int i = 2; i <= Math.sqrt(n); i++) { // t·ªëi ∆∞u b·∫±ng cƒÉn b·∫≠c hai
            if (n % i == 0) return false;
        }
        return true;
    }
}
```

### Main.java

```java
public class Main {
    public static void main(String[] args) {
        Runnable lazy = new LazyPrimeFactorization();
        Runnable optimized = new OptimizedPrimeFactorization();

        Thread t1 = new Thread(lazy);
        Thread t2 = new Thread(optimized);

        t1.start();
        t2.start();
    }
}
```

---

## B∆∞·ªõc 5: T∆∞ duy x·ª≠ l√Ω logic khi ch·∫°y

1. Khi `main` ch·∫°y:

   * T·∫°o ra `t1` v√† `t2`.
2. Khi g·ªçi `t1.start()` ‚Üí Java t·∫°o **m·ªôt lu·ªìng ri√™ng bi·ªát** ch·∫°y `lazy.run()`.
3. Khi g·ªçi `t2.start()` ‚Üí Java t·∫°o **m·ªôt lu·ªìng ri√™ng bi·ªát** ch·∫°y `optimized.run()`.
4. Hai lu·ªìng ch·∫°y **song song** (th·ª±c t·∫ø l√† xen k·∫Ω do CPU chia s·∫ª th·ªùi gian).
5. V√¨ thu·∫≠t to√°n c·ªßa `optimized` hi·ªáu qu·∫£ h∆°n n√™n khi tƒÉng gi·ªõi h·∫°n l·ªõn (v√≠ d·ª• 100000), ta s·∫Ω th·∫•y n√≥ nhanh h∆°n h·∫≥n so v·ªõi `lazy`.

---

## B∆∞·ªõc 6: M·ªü r·ªông (ƒë·ªÉ luy·ªán th√™m)

* Th√™m **ƒëo th·ªùi gian ch·∫°y** ƒë·ªÉ so s√°nh:

```java
long start = System.currentTimeMillis();
// code t√¨m prime
long end = System.currentTimeMillis();
System.out.println("Time: " + (end - start) + " ms");
```

* Th√™m **synchronization** n·∫øu mu·ªën qu·∫£n l√Ω vi·ªác in ra kh√¥ng b·ªã xen k·∫Ω.
* Thay v√¨ in ra, c√≥ th·ªÉ l∆∞u s·ªë nguy√™n t·ªë v√†o m·ªôt list v√† so s√°nh k·∫øt qu·∫£.

---

üìå **T√≥m g·ªçn c√°ch t∆∞ duy**:

* ƒê·ªçc ƒë·ªÅ ‚Üí chia nh·ªè v·∫•n ƒë·ªÅ ‚Üí x√°c ƒë·ªãnh ph·∫ßn Thread + ph·∫ßn thu·∫≠t to√°n.
* L·∫≠p k·∫ø ho·∫°ch (pseudo-code) ‚Üí vi·∫øt t·ª´ng class Runnable.
* Vi·∫øt main ƒë·ªÉ t·∫°o Thread.
* Ch·∫°y th·ª≠ v·ªõi input nh·ªè ‚Üí sau ƒë√≥ m·ªü r·ªông.

---